import React, { useState, useEffect } from "react";
import Chart from "react-apexcharts";
import styled from "styled-components";
import { useStyledTheme } from "../../../hooks";
import { Card, InfoStack } from "../../../";
const StyledCard = styled(Card)`
  height: 440px;
  min-height: 440px;
  max-height: 440px;
`;
const StyledChart = styled.div`
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 260px;
  transform: translateX(0);
  margin-top: 2rem;

  @media (min-width: ${p => p.theme.screenWidthMd}) {
    margin-top: 0;
  }
`;
const StyledChartWrapper = styled.div`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  min-width: 100%;
`;

const Wrapper = ({
  cardTitle,
  value,
  label,
  series
}) => {
  const theme = useStyledTheme();
  const [options, setOptions] = useState({
    chart: {
      animations: {
        enabled: false
      },
      toolbar: {
        show: false
      }
    },
    grid: {
      padding: {
        top: 60,
        bottom: 0
      }
    },
    stroke: {
      curve: "smooth"
    },
    markers: {
      size: 6,
      strokeWidth: 3
    },
    yaxis: {
      show: false
    },
    xaxis: {
      categories: ["", "Legside Top", "Legside Bottom", "Down the ground", "Offside Bottom", "Offside Top"]
    },
    tooltip: {
      enabled: false
    },
    legend: {
      show: false
    },
    dataLabels: {
      enabled: false
    }
  });
  const colors = [theme.colorAccent, theme.colorDefaultBackground];
  useEffect(() => {
    if (theme) {
      setOptions({ ...options,
        colors,
        fill: {
          colors: "transparent"
        },
        markers: { ...options.markers,
          colors: theme.colorCardBackground,
          strokeColors: theme.colorAccent
        },
        plotOptions: {
          radar: {
            size: 100,
            polygons: {
              strokeColors: theme.colorBorder,
              strokeWidth: 2,
              connectorColors: theme.colorBorder
            }
          }
        },
        xaxis: { ...options.xaxis,
          labels: {
            style: {
              fontFamily: theme.fontFamily
            }
          }
        }
      });
    }
  }, [theme]);
  return /*#__PURE__*/React.createElement(StyledCard, {
    cardTitle: cardTitle
  }, /*#__PURE__*/React.createElement(StyledChart, null, /*#__PURE__*/React.createElement(StyledChartWrapper, null, options.colors && /*#__PURE__*/React.createElement(Chart, {
    options: options,
    series: series,
    type: "radar",
    height: "400"
  }))));
};

export default Wrapper;